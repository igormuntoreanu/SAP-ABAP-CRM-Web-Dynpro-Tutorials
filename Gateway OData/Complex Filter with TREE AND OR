URI Example
GET EquiRefSet?$filter=FilterLanguage eq 'DE-DE' and IvKlart eq 'ZFC' and IvClass eq 'P4020000_IB' and ((FilterChar eq 'IB_000005' and (FilterCharValue eq '1112' or FilterCharValue eq '1111' or FilterCharValue eq '1113')) and (FilterChar eq 'IB_000048' and (FilterCharValue eq '01' or FilterCharValue eq '02')) and (FilterChar eq 'IB_000046' and FilterCharValue eq '02'))

METHOD equirefset_get_entityset.

  DATA: lv_language         TYPE zcl70plm_ibase_visu_mpc=>ts_equiref-filterlanguage,
        lv_class            TYPE zcl70plm_ibase_visu_mpc=>ts_equiref-iv_class,
        lv_klart            TYPE zcl70plm_ibase_visu_mpc=>ts_equiref-iv_klart,
        lv_equnr            TYPE zcl70plm_ibase_visu_mpc=>ts_equiref-equnr,
        lr_filterchar       TYPE RANGE OF zcl70plm_ibase_visu_mpc=>ts_equiref-filterchar,
        ls_rfilterchar      LIKE LINE OF lr_filterchar,
        lr_filtercharvalues TYPE RANGE OF zcl70plm_ibase_visu_mpc=>ts_equiref-filtercharvalue.

  DATA: lt_entityset TYPE zcl70plm_ibase_visu_mpc=>tt_equiref,
        ls_entityset TYPE LINE OF zcl70plm_ibase_visu_mpc=>tt_equiref.

  TYPES: BEGIN OF ty_complex_condition,
           type      TYPE string,
           value     TYPE string,
           attribute TYPE string,
           guid      TYPE sysuuid_x16,
         END OF ty_complex_condition.

  DATA: lt_condition_del TYPE TABLE OF ty_complex_condition.
  DATA: lt_condition_aux TYPE TABLE OF ty_complex_condition.
  DATA: ls_condition_aux TYPE ty_complex_condition.
  DATA: lv_tabix TYPE sy-tabix.
  DATA: lv_index TYPE sy-index.
  DATA: lt_ranges TYPE sabp_t_name_range_pairs.
  DATA: lv_has_filter TYPE c.
  "Due to high complexity of filter the logic needed to be transformed as below
  DATA(lo_filter_tree) = io_tech_request_context->get_filter_expression_tree( ).

  IF lo_filter_tree IS BOUND.
    NEW cl_sadl_gw_filter_tree_parser( )->get_complex_condition(
      EXPORTING
        io_filter_tree = lo_filter_tree
        iv_use_placeholders = abap_false
      IMPORTING
        et_condition   = DATA(lt_condition) ).

    NEW cl_sadl_cond_to_ranges( )->convert_sadl_cond_to_ranges(
      EXPORTING
        it_sadl_conditions = lt_condition
      IMPORTING
        et_ranges          = lt_ranges ).
  ENDIF.

  "The Filter Char should be done one by one.
  LOOP AT lt_condition ASSIGNING FIELD-SYMBOL(<fs_condition>).
    TRY.
        DATA(lv_new_16) = cl_system_uuid=>create_uuid_x16_static( ).
      CATCH cx_uuid_error.
    ENDTRY.
    MOVE-CORRESPONDING <fs_condition> TO ls_condition_aux.
    ls_condition_aux-guid = lv_new_16.
    APPEND ls_condition_aux TO lt_condition_aux.
    CLEAR ls_condition_aux.
  ENDLOOP.
  "Create auxiliar table of condition
  DATA(lt_condition_main) = lt_condition_aux[].

* Get RFC destination
  DATA(lo_dp_facade) = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
  DATA(lv_destination) = /iwbep/cl_sb_gen_dpc_rt_util=>get_rfc_destination( io_dp_facade = lo_dp_facade ).

  READ TABLE lt_condition_main WITH KEY attribute = 'FILTERCHAR' TRANSPORTING NO FIELDS.
  IF sy-subrc = 0.
    lv_has_filter = abap_true.
  ENDIF.

  IF lv_has_filter IS NOT INITIAL.
    DO.
      lv_index = sy-index.
      lt_condition_aux[] = lt_condition_main[].
      IF lt_condition_del IS NOT INITIAL.
        LOOP AT lt_condition_aux INTO ls_condition_aux.
          lv_tabix = sy-tabix.
          READ TABLE lt_condition_del WITH KEY guid = ls_condition_aux-guid TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            DELETE lt_condition_aux INDEX lv_tabix.
          ENDIF.
        ENDLOOP.
      ENDIF.

      READ TABLE lt_condition_aux INTO ls_condition_aux WITH KEY attribute = 'FILTERCHAR'.
      IF sy-subrc = 0.

        DELETE lt_condition_aux FROM sy-tabix + 3. "Keep equals and "and" then delete the rest
        APPEND LINES OF lt_condition_aux[] TO lt_condition_del[].

        NEW cl_sadl_cond_to_ranges( )->convert_sadl_cond_to_ranges(
            EXPORTING
              it_sadl_conditions = CORRESPONDING #( lt_condition_aux[] )
            IMPORTING
              et_ranges          = DATA(lt_ranges_char) ).

        READ TABLE lt_ranges_char INTO DATA(ls_filter) WITH KEY name = 'FILTERCHAR'.
        IF sy-subrc = 0.
          LOOP AT ls_filter-range INTO DATA(ls_filterchar).
            lv_tabix = sy-tabix.
            READ TABLE lt_ranges      INTO DATA(ls_language) WITH KEY name = 'FILTERLANGUAGE'.
            READ TABLE lt_ranges      INTO DATA(ls_class)    WITH KEY name = 'IV_CLASS'.
            READ TABLE lt_ranges      INTO DATA(ls_klart)    WITH KEY name = 'IV_KLART'.
            READ TABLE lt_ranges      INTO DATA(ls_equi)     WITH KEY name = 'EQUNR'.
            READ TABLE lt_ranges_char INTO DATA(ls_atwrt)    WITH KEY name = 'FILTERCHARVALUE'.

            lv_language          = VALUE #( ls_language-range[ 1 ]-low OPTIONAL ).
            lv_class             = VALUE #( ls_class-range[ 1 ]-low OPTIONAL ).
            lv_klart             = VALUE #( ls_klart-range[ 1 ]-low OPTIONAL ).
            lv_equnr             = VALUE #( ls_equi-range[ 1 ]-low OPTIONAL ).
            CLEAR lr_filterchar.
            MOVE-CORRESPONDING ls_filterchar TO ls_rfilterchar.
            APPEND ls_rfilterchar TO lr_filterchar.

            CLEAR lr_filtercharvalues.
            MOVE-CORRESPONDING ls_atwrt-range[] TO lr_filtercharvalues[].

            DATA(lv_rfc_name) = 'Z_20PLM_IBASE_VISU_EQUI_REF'.

            IF lv_destination IS INITIAL OR lv_destination EQ 'NONE'.

              TRY.
                  CALL FUNCTION lv_rfc_name
                    EXPORTING
                      iv_klart       = lv_klart
                      iv_class       = lv_class
                      iv_equnr       = lv_equnr
                      iv_language    = lv_language
                      it_rg_atnam    = lr_filterchar
                      it_rg_atwrt    = lr_filtercharvalues
                    IMPORTING
                      et_equi_list   = lt_entityset
                    EXCEPTIONS
                      system_failure = 1000 message lv_exc_msg
                      OTHERS         = 1002.

                  DATA(lv_subrc) = sy-subrc.
*in case of co-deployment the exception is raised and needs to be caught
                CATCH cx_root INTO DATA(lx_root).
                  lv_subrc = 1001.
                  DATA(lv_exc_msg) = lx_root->if_message~get_text( ).
              ENDTRY.

            ELSE.

              CALL FUNCTION lv_rfc_name DESTINATION lv_destination
                EXPORTING
                  iv_klart       = lv_klart
                  iv_class       = lv_class
                  iv_equnr       = lv_equnr
                  iv_language    = lv_language
                  it_rg_atnam    = lr_filterchar
                  it_rg_atwrt    = lr_filtercharvalues
                IMPORTING
                  et_equi_list   = lt_entityset
                EXCEPTIONS
                  system_failure = 1000
                  OTHERS         = 1002.

            ENDIF.

            IF lv_index = 1. "First
              DATA(lt_entityset_main) = lt_entityset.
            ELSE.
              LOOP AT lt_entityset_main INTO DATA(ls_entityset_main).
                DATA(lv_tabix_main) = sy-tabix.
                READ TABLE lt_entityset WITH KEY equnr = ls_entityset_main-equnr TRANSPORTING NO FIELDS.
                IF sy-subrc NE 0.
                  DELETE lt_entityset_main INDEX lv_tabix_main.
                ENDIF.
              ENDLOOP.
            ENDIF.
          ENDLOOP.
        ENDIF.

      ELSE. " All filters have been processed
        EXIT.
      ENDIF.

    ENDDO.

  ELSE.
    READ TABLE lt_ranges INTO ls_language WITH KEY name = 'FILTERLANGUAGE'.
    READ TABLE lt_ranges INTO ls_class    WITH KEY name = 'IV_CLASS'.
    READ TABLE lt_ranges INTO ls_klart    WITH KEY name = 'IV_KLART'.
    READ TABLE lt_ranges INTO ls_equi     WITH KEY name = 'EQUNR'.
    READ TABLE lt_ranges INTO ls_atwrt    WITH KEY name = 'FILTERCHARVALUE'.

    lv_language          = VALUE #( ls_language-range[ 1 ]-low OPTIONAL ).
    lv_class             = VALUE #( ls_class-range[ 1 ]-low OPTIONAL ).
    lv_klart             = VALUE #( ls_klart-range[ 1 ]-low OPTIONAL ).
    lv_equnr             = VALUE #( ls_equi-range[ 1 ]-low OPTIONAL ).

    lv_rfc_name = 'Z_20PLM_IBASE_VISU_EQUI_REF'.

    IF lv_destination IS INITIAL OR lv_destination EQ 'NONE'.

      TRY.
          CALL FUNCTION lv_rfc_name
            EXPORTING
              iv_klart       = lv_klart
              iv_class       = lv_class
              iv_equnr       = lv_equnr
              iv_language    = lv_language
              it_rg_atnam    = lr_filterchar
              it_rg_atwrt    = lr_filtercharvalues
            IMPORTING
              et_equi_list   = lt_entityset_main
            EXCEPTIONS
              system_failure = 1000 message lv_exc_msg
              OTHERS         = 1002.

          lv_subrc = sy-subrc.
*in case of co-deployment the exception is raised and needs to be caught
        CATCH cx_root INTO lx_root.
          lv_subrc = 1001.
          lv_exc_msg = lx_root->if_message~get_text( ).
      ENDTRY.

    ELSE.

      CALL FUNCTION lv_rfc_name DESTINATION lv_destination
        EXPORTING
          iv_klart       = lv_klart
          iv_class       = lv_class
          iv_equnr       = lv_equnr
          iv_language    = lv_language
          it_rg_atnam    = lr_filterchar
          it_rg_atwrt    = lr_filtercharvalues
        IMPORTING
          et_equi_list   = lt_entityset_main
        EXCEPTIONS
          system_failure = 1000
          OTHERS         = 1002.

    ENDIF.
  ENDIF.


  LOOP AT lt_entityset_main ASSIGNING FIELD-SYMBOL(<fs_entityset_main>).
    MOVE-CORRESPONDING <fs_entityset_main> TO ls_entityset.
    ls_entityset-iv_class = lv_class.
    ls_entityset-iv_klart = lv_klart.
    APPEND ls_entityset TO et_entityset.
    CLEAR ls_entityset.
  ENDLOOP.

  map_and_sort(
        EXPORTING
          it_order       = it_order "/iwbep/t_mgw_sorting_order
          iv_entity_name = iv_entity_name
        CHANGING
          ct_table       = et_entityset ).

  "Paging
  CALL METHOD /iwbep/cl_mgw_data_util=>paging
    EXPORTING
      is_paging = is_paging
    CHANGING
      ct_data   = et_entityset.

ENDMETHOD.
__________________________________________________________________-

FUNCTION z_20plm_ibase_visu_equi_ref ##RFC_PERFORMANCE_OK.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     VALUE(IV_KLART) TYPE  KLASSENART OPTIONAL
*"     VALUE(IV_CLASS) TYPE  KLASSE_D OPTIONAL
*"     VALUE(IV_EQUNR) TYPE  EQUNR OPTIONAL
*"     VALUE(IV_LANGUAGE) TYPE  SY-LANGU OPTIONAL
*"     VALUE(IT_RG_ATNAM) TYPE  Z20PLMTY_RG_ATNAM OPTIONAL
*"     VALUE(IT_RG_ATWRT) TYPE  Z20PLMTY_RG_ATWRT OPTIONAL
*"  EXPORTING
*"     VALUE(ET_EQUI_LIST) TYPE  RIHEQUI_LIST_T
*"     VALUE(EV_KLART) TYPE  KLASSENART
*"     VALUE(EV_CLASS) TYPE  KLASSE_D
*"----------------------------------------------------------------------

  DATA: lt_comw   TYPE tt_comw,
*        lt_objs   TYPE tt_clsel_objects,
        ls_output TYPE rihequi_list,
        lr_dec    TYPE RANGE OF auspext_dec_from,
        ls_dec    LIKE LINE OF lr_dec,
        lv_equi   TYPE equi-equnr.

  CHECK iv_klart IS NOT INITIAL OR
        iv_class IS NOT INITIAL OR
        iv_equnr IS NOT INITIAL OR
        iv_language IS NOT INITIAL OR
        it_rg_atnam IS NOT INITIAL OR
        it_rg_atwrt IS NOT INITIAL.

  ev_klart = iv_klart.
  ev_class = iv_class.

  IF iv_equnr IS NOT INITIAL.
    lv_equi = |{ iv_equnr ALPHA = IN }|.
  ENDIF.

  IF iv_language IS NOT INITIAL.
    DATA(lv_language) = iv_language.
  ELSE.
    lv_language = sy-langu.
  ENDIF.

  IF it_rg_atwrt IS NOT INITIAL OR it_rg_atnam IS NOT INITIAL.

    "Transform GE and LE to BT
    DATA(lt_rg_atwrt_aux) = it_rg_atwrt[].

    LOOP AT lt_rg_atwrt_aux ASSIGNING FIELD-SYMBOL(<fs_atwrt_aux>).
      DATA(lv_tabix) = sy-tabix.
      IF <fs_atwrt_aux>-option = 'GE'.
        DATA(ls_atwrt_aux_ge) = <fs_atwrt_aux>.
        IF sy-tabix + 1 <= lines( lt_rg_atwrt_aux ). "Check if next line exists and if it is LE
          DATA(ls_atwrt_aux_le) = VALUE #( lt_rg_atwrt_aux[ sy-tabix + 1 ] OPTIONAL ).
          IF ls_atwrt_aux_le-option = 'LE'.
            <fs_atwrt_aux>-option = 'BT'. "Update GE line
            <fs_atwrt_aux>-high   = ls_atwrt_aux_le-low.
            DELETE lt_rg_atwrt_aux INDEX lv_tabix + 1. "Delete LE line
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.

    "Filter by Characteristics Values
    SELECT DISTINCT a~objek, b~objek AS equnr
      FROM ausp AS a
      INNER JOIN inob AS b ON ( b~cuobj = a~objek )
      INNER JOIN cabn AS c ON ( c~atinn = a~atinn )
      INTO TABLE @DATA(lt_ausp)
      WHERE a~atwrt IN @lt_rg_atwrt_aux ##SELECT_NULL_VALUES[ATWRT]
        AND c~atnam IN @it_rg_atnam.
    IF sy-subrc <> 0.
      "Sometimes the values are in the field DEC_VALUE_FROM
      SELECT DISTINCT a~objek, b~objek AS equnr
      FROM ausp AS a
      INNER JOIN inob AS b ON ( b~cuobj = a~objek )
      INNER JOIN cabn AS c ON ( c~atinn = a~atinn )
      INTO TABLE @lt_ausp
      WHERE ( a~dec_value_from IN @lt_rg_atwrt_aux OR a~atflv IN @lt_rg_atwrt_aux ) ##SELECT_NULL_VALUES[ATFLV]
        AND c~atnam IN @it_rg_atnam.
    ENDIF.
    IF sy-subrc = 0.
      SORT lt_ausp BY equnr.
      DELETE ADJACENT DUPLICATES FROM lt_ausp COMPARING equnr.
      SELECT equnr
        FROM equi
        INTO TABLE @DATA(lt_equipments_help)
        FOR ALL ENTRIES IN @lt_ausp
        WHERE equnr = @lt_ausp-equnr(18).
      IF sy-subrc = 0.
        SORT lt_equipments_help BY equnr.
      ENDIF.
    ENDIF.

    IF lv_equi IS NOT INITIAL.
      DELETE lt_equipments_help WHERE equnr <> lv_equi.
    ENDIF.

    IF lt_equipments_help IS INITIAL.
      EXIT. "No Equipments found for given Characteristic and value
    ENDIF.
  ENDIF.

************ Performance Issue - 20.04.2023 - Begin
*  CALL FUNCTION 'IHCLSD_PROCESS_SEARCH'
*    EXPORTING
*      i_klart                 = iv_klart
*      i_class                 = iv_class
*      it_comw                 = lt_comw
*      i_objecttype            = 'EQUI'
*    CHANGING
*      ct_objects              = lt_objs
*    EXCEPTIONS
*      no_objects_found        = 1
*      inconsistent_parameters = 2
*      no_authority_classtype  = 3
*      no_valid_classes        = 4
*      OTHERS                  = 5.
*  IF sy-subrc = 0.
************* Performance Issue - 09.02.2023 - Begin
*    IF lt_equipments_help IS NOT INITIAL.
*      LOOP AT lt_objs ASSIGNING FIELD-SYMBOL(<fs_objs>).
*        DATA(lv_tabix) = sy-tabix.
*        READ TABLE lt_equipments_help WITH KEY equnr = <fs_objs>-object(18) TRANSPORTING NO FIELDS BINARY SEARCH.
*        IF sy-subrc <> 0.
*          DELETE lt_objs INDEX lv_tabix.
*        ENDIF.
*      ENDLOOP.
*    ENDIF.
************* Performance Issue - 09.02.2023 - End
** check if all returned objects are really related to classification
*    LOOP AT lt_objs INTO DATA(ls_object) WHERE obtab = 'EQUI'. "v n2061987
*      IF ls_object-cuobj IS NOT INITIAL.                    "n2120296
*        CALL FUNCTION 'CUCB_GET_OWNER_OF_CFG'
*          EXPORTING
*            i_instance                   = ls_object-cuobj
*          EXCEPTIONS
*            invalid_instance             = 1
*            instance_is_a_classification = 2
*            unknown_owner                = 3
*            OTHERS                       = 4.
*        IF sy-subrc <> 2.
**       instance is not a classification and should be removed
*          DELETE lt_objs WHERE cuobj = ls_object-cuobj.
*        ENDIF.
*      ENDIF.                                                "n2120296
*    ENDLOOP.
*
*    IF iv_equnr IS NOT INITIAL.
*      DELETE lt_objs WHERE object(18) NE iv_equnr.
*    ENDIF.
*
*    CHECK lt_objs IS NOT INITIAL.
************ Performance Issue - 20.04.2023 - End
  SELECT *
    FROM z20pmv_equi
    INTO TABLE @DATA(lt_z20pmv_equi)
    FOR ALL ENTRIES IN @lt_equipments_help
    WHERE equnr EQ @lt_equipments_help-equnr
      AND datbi GE @sy-datum
      AND spras EQ @lv_language. "Performance Issue - 09.02.2023
  IF sy-subrc = 0.
    "Performance Issue - 09.02.2023 - Begin
    DATA(lt_z20pmv_equi_aux) = lt_z20pmv_equi[].
    SORT lt_z20pmv_equi_aux BY objnr.
    DELETE ADJACENT DUPLICATES FROM lt_z20pmv_equi_aux COMPARING objnr.

    SELECT * FROM ihpa
     INTO TABLE @DATA(it_ihpa)
     FOR ALL ENTRIES IN @lt_z20pmv_equi_aux
     WHERE objnr    =  @lt_z20pmv_equi_aux-objnr AND
           kzloesch =  ' '  AND
           ( parvw    = 'EN' OR
             parvw    = 'Z0' ).
    IF sy-subrc = 0.
      SORT it_ihpa BY objnr.
      SELECT kunnr, name1
             FROM kna1
             INTO TABLE @DATA(lt_kna1)
             FOR ALL ENTRIES IN @it_ihpa
             WHERE kunnr EQ @it_ihpa-parnr(10).
      IF sy-subrc = 0.
        SORT lt_kna1 BY kunnr.
      ENDIF.

      SELECT id, codeword, kdgrp
        FROM z20sdt_codeword
        INTO TABLE @DATA(lt_z20sdt_codeword)
        FOR ALL ENTRIES IN @it_ihpa
             WHERE id EQ @it_ihpa-parnr(10).
      IF sy-subrc = 0.
        SORT lt_z20sdt_codeword BY id.

        SELECT kdgrp, ktext
           FROM t151t
           INTO TABLE @DATA(lt_t151t)
          FOR ALL ENTRIES IN @lt_z20sdt_codeword
           WHERE spras = @lv_language AND
                 kdgrp = @lt_z20sdt_codeword-kdgrp.
        IF sy-subrc = 0.
          SORT lt_t151t BY kdgrp.
        ENDIF.
      ENDIF.

************ Performance Issue - 09.02.2023 - End
      "Begin of Z20PM_RIEQUI20 - ENDKUNDE_KENNWORT
      LOOP AT lt_z20pmv_equi INTO DATA(ls_z20pmv_equi).
        MOVE-CORRESPONDING ls_z20pmv_equi TO ls_output.
************ Performance Issue - 09.02.2023 - Begin
*        SELECT * FROM ihpa  " Remove Select from inside the LOOP
*               INTO TABLE @DATA(it_ihpa)
*               WHERE objnr    =  @ls_z20pmv_equi-objnr AND
*                     kzloesch =  ' '  AND
*                     ( parvw    = 'EN' OR
*                       parvw    = 'Z0' ).
*        IF sy-subrc EQ 0.
        READ TABLE it_ihpa WITH KEY objnr = ls_z20pmv_equi-objnr BINARY SEARCH TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
          LOOP AT it_ihpa INTO DATA(ls_ihpa) FROM sy-tabix. "Perform BINARY LOOP
            IF ls_ihpa-objnr <> ls_z20pmv_equi-objnr.
              EXIT.
            ENDIF.
************ Performance Issue - 09.02.2023 - End
            CASE ls_ihpa-parvw.
* Endkunde
              WHEN 'EN'.
                ls_output-kund2 = ls_ihpa-parnr.
                ls_output-zzendcustomer = ls_ihpa-parnr.                 "008
************ Performance Issue - 09.02.2023 - Begin
*                SELECT SINGLE name1                                       "008
*                       FROM kna1                                          "008
*                       INTO ls_output-zzendcustomer_name                 "008
*                       WHERE kunnr EQ ls_ihpa-parnr.                      "008
                READ TABLE lt_kna1 INTO DATA(ls_kna1) WITH KEY kunnr = ls_ihpa-parnr BINARY SEARCH.
                IF sy-subrc = 0.
                  ls_output-zzendcustomer_name = ls_kna1-name1.
                ENDIF.
************ Performance Issue - 09.02.2023 - End
* Kennwort
              WHEN 'Z0'.
                ls_output-zzkunnr_z0 = ls_ihpa-parnr.
************ Performance Issue - 09.02.2023 - Begin
*begin 004 zusätzlich Paper Category ausgeben
*                SELECT SINGLE codeword, kdgrp FROM z20sdt_codeword
*                       INTO (@ls_output-zzkunnr_z0_name, @DATA(lv_kdgrp) )
*                       WHERE id = @ls_ihpa-parnr.
*
*                SELECT SINGLE ktext
*                       FROM t151t
*                       INTO ls_output-zzkdgrp
*                       WHERE spras = lv_language AND
*                             kdgrp = lv_kdgrp.
*                IF sy-subrc <> 0.
                READ TABLE lt_z20sdt_codeword INTO DATA(ls_z20sdt_codeword) WITH KEY id = ls_ihpa-parnr BINARY SEARCH.
                IF sy-subrc = 0.
                  ls_output-zzkunnr_z0_name = ls_z20sdt_codeword-codeword.

                  READ TABLE lt_t151t INTO DATA(ls_t151t) WITH KEY kdgrp = ls_z20sdt_codeword-kdgrp BINARY SEARCH.
                  IF sy-subrc = 0.
                    ls_output-zzkdgrp = ls_t151t-ktext.
                  ENDIF.
                ELSE.
************ Performance Issue - 09.02.2023 - End
*end 004
************ Performance Issue - 09.02.2023 - Begin
*                  SELECT SINGLE name1
*                                   FROM kna1
*                                   INTO ls_output-zzkunnr_z0_name
*                                   WHERE kunnr = ls_ihpa-parnr.
                  READ TABLE lt_kna1 INTO ls_kna1 WITH KEY kunnr = ls_ihpa-parnr BINARY SEARCH.
                  IF sy-subrc = 0.
                    ls_output-zzkunnr_z0_name = ls_kna1-name1.
                  ENDIF.
                ENDIF.
************ Performance Issue - 09.02.2023 - End
************ Performance Issue - 09.02.2023 - End
            ENDCASE.
          ENDLOOP.
        ENDIF.

        SHIFT ls_output-equnr LEFT DELETING LEADING '0'.
        SHIFT ls_output-heqnr LEFT DELETING LEADING '0'.
        SHIFT ls_output-hequi LEFT DELETING LEADING '0'.
        SHIFT ls_output-sernr LEFT DELETING LEADING '0'.
        SHIFT ls_output-kund1 LEFT DELETING LEADING '0'.
        SHIFT ls_output-kund2 LEFT DELETING LEADING '0'.
        SHIFT ls_output-kund3 LEFT DELETING LEADING '0'.
        SHIFT ls_output-iloan LEFT DELETING LEADING '0'.
        SHIFT ls_output-zzvbeln_orig LEFT DELETING LEADING '0'.
        SHIFT ls_output-zzvbpos_orig LEFT DELETING LEADING '0'.
        SHIFT ls_output-zzvbeln_latest LEFT DELETING LEADING '0'.
        SHIFT ls_output-zzvbpos_latest LEFT DELETING LEADING '0'.
        SHIFT ls_output-zzkunnr_z0 LEFT DELETING LEADING '0'.
        SHIFT ls_output-zzendcustomer LEFT DELETING LEADING '0'.

        APPEND ls_output TO et_equi_list.
        CLEAR ls_output.
      ENDLOOP.

      " End of Z20PM_RIEQUI20 - ENDKUNDE_KENNWORT

************ Performance Issue - 09.02.2023 - Begin
      " Logic below is not necessary
*        " Begin of DELETE_WRONG_LANG_F30
*        SORT et_equi_list BY equnr datbi eqlfn.
*        LOOP AT et_equi_list ASSIGNING FIELD-SYMBOL(<object_tab_l>) WHERE spras <> lv_language.
*          DATA(lv_tabix_original) = sy-tabix.
*          DATA(l_tabix) = sy-tabix + 1.
*          READ TABLE et_equi_list INDEX l_tabix ASSIGNING FIELD-SYMBOL(<object_tab_r>).
*          IF sy-subrc = 0.
*            IF <object_tab_l>-equnr = <object_tab_r>-equnr AND
*               <object_tab_l>-datbi = <object_tab_r>-datbi AND
*               <object_tab_l>-eqlfn = <object_tab_r>-eqlfn.
**--- nur gleiche Zeitsegmente löschen -------------------------------*
*              DELETE et_equi_list INDEX lv_tabix_original.
*              CONTINUE.
*            ENDIF.
*          ENDIF.
*          l_tabix = l_tabix - 2.
*          IF l_tabix > 0.
*            READ TABLE et_equi_list INDEX l_tabix ASSIGNING <object_tab_r>.
*            IF sy-subrc = 0.
*              IF <object_tab_l>-equnr = <object_tab_r>-equnr AND
*                 <object_tab_l>-datbi = <object_tab_r>-datbi AND
*                 <object_tab_l>-eqlfn = <object_tab_r>-eqlfn.
*                DELETE et_equi_list INDEX lv_tabix_original.
*              ENDIF.
*            ENDIF.
*          ENDIF.
*        ENDLOOP.
*        "End of DELETE_WRONG_LANG_F30
************ Performance Issue - 09.02.2023 - End
    ENDIF.
  ENDIF.

  SORT et_equi_list BY equnr.
  DELETE ADJACENT DUPLICATES FROM et_equi_list COMPARING equnr.

*  ENDIF.

ENDFUNCTION.

______________________________________________________________________________________________________

FUNCTION z_20plm_ibase_visu_class_value.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     VALUE(IV_EQUNR) TYPE  EQUNR OPTIONAL
*"     VALUE(IV_CLASS) TYPE  KLASSE_D
*"     VALUE(IV_CLASSTYPE) TYPE  KLASSENART
*"     VALUE(IV_LANGUAGE) TYPE  LANGU OPTIONAL
*"     VALUE(IV_CHARACT) TYPE  ATNAM OPTIONAL
*"     VALUE(IV_VALUE_CHAR) TYPE  ATWRT OPTIONAL
*"  EXPORTING
*"     VALUE(EV_EQUNR) TYPE  EQUNR
*"     VALUE(EV_CLASS) TYPE  KLASSE_D
*"     VALUE(EV_CLASSTYPE) TYPE  KLASSENART
*"     VALUE(EV_LANGUAGE) TYPE  LANGU
*"     VALUE(EV_CHARACT) TYPE  ATNAM
*"  TABLES
*"      ET_CLASSVALUES STRUCTURE  Z20PLMS_ALM_ME_CLASSVALUES OPTIONAL
*"----------------------------------------------------------------------
*---------------------------------------------------------------------
*  Function module:   Z_20PLM_IBASE_VISU_CLASS_VALUE
*  Title:             Get equipment classification values
*  Autor:             Sybille Eisermann DSG
*  Customer:          Oliver Baunholzer DSG
*  Created:           2022-03
*
*  Short description:  gets equipment classification values
*                      (including empty values)
*---------------------------------------------------------------------
*  Changes:        Description (newest on top)
*---------------------------------------------------------------------
*  LNr / JJJJ-MM-TT / Name    / Project-Nr
*---------------------------------------------------------------------

  TYPES BEGIN OF lty_ksml_key.
  TYPES clint TYPE clint.
  TYPES posnr TYPE kposnr.
  TYPES adzhl TYPE adzhl.
  TYPES lkenz TYPE lkenz.
  TYPES imerk TYPE atinn.
  TYPES END OF lty_ksml_key.

  DATA: ls_classvalues         LIKE LINE OF et_classvalues,
        lt_classvalues         TYPE TABLE OF z20plms_alm_me_classvalues,
        lt_classvalues_final   TYPE TABLE OF z20plms_alm_me_classvalues,
        lv_object              TYPE cuobn,
        lt_funcloc_classvalues TYPE TABLE OF alm_me_classvalues,
        lt_return              TYPE TABLE OF bapiret2,
        lv_language            TYPE langu,
        lv_atinn               TYPE atinn,
        ls_ksml                TYPE lty_ksml_key,
        lt_ksml                LIKE TABLE OF ls_ksml,
        lt_rg_imerk            TYPE RANGE OF atinn,
        ls_rg_imerk            LIKE LINE OF lt_rg_imerk.


  FIELD-SYMBOLS: <fs_funcloc_classvalue> LIKE LINE OF lt_funcloc_classvalues,
                 <fs_classvalue>         LIKE ls_classvalues.

  CONSTANTS  c_class_equi    TYPE tabelle VALUE 'EQUI'.

  IF iv_equnr IS INITIAL AND
     iv_class IS INITIAL AND
     iv_classtype IS INITIAL AND
     iv_language IS INITIAL AND
     iv_charact IS INITIAL AND
     iv_value_char IS INITIAL.
    EXIT.
  ENDIF.

  "take sy-langu if no language is given
  IF iv_language IS INITIAL.
    lv_language = sy-langu.
  ELSE.
    lv_language = iv_language.
  ENDIF.

  " all classvalues of classification
  SELECT b~clint b~posnr b~adzhl b~lkenz b~imerk
    FROM klah AS a
    INNER JOIN ksml AS b
      ON a~clint EQ b~clint
    INTO TABLE lt_ksml
    WHERE a~class = iv_class
      AND a~klart = iv_classtype.
  " only actual version of each position
  LOOP AT lt_ksml INTO ls_ksml WHERE adzhl NE 0.
    DELETE lt_ksml
     WHERE posnr = ls_ksml-posnr
       AND adzhl < ls_ksml-adzhl.
  ENDLOOP.
  " errase deleted class values
  DELETE lt_ksml WHERE lkenz = abap_true.
  " sort by posnr
  SORT lt_ksml BY posnr ASCENDING.
  " create range table
  ls_rg_imerk-sign = 'I'.
  ls_rg_imerk-option = 'EQ'.
  LOOP AT lt_ksml INTO ls_ksml.
    ls_rg_imerk-low = ls_ksml-imerk.
    APPEND ls_rg_imerk TO lt_rg_imerk.
  ENDLOOP.
  " select values
  DATA: lv_anzst TYPE cabn-anzst.

  SELECT c~atinn c~atnam t~atbez c~atfor AS datatype c~anzst AS datalength
         c~anzst "Decimalplaces
    FROM cabn AS c
    JOIN cabnt AS t
      ON ( t~atinn EQ c~atinn )
    INTO ( ls_classvalues-internalchar, ls_classvalues-charact, ls_classvalues-charact_descr, ls_classvalues-datatype, ls_classvalues-datalength, lv_anzst )
    WHERE c~atinn IN lt_rg_imerk
      AND c~lkenz = abap_false
      AND c~datub >= sy-datum
      AND t~datub >= sy-datum
      AND t~spras = lv_language
      AND c~atmst = '7'.  "Released
    APPEND ls_classvalues TO lt_classvalues.
  ENDSELECT.

  IF iv_equnr IS NOT INITIAL.

    " classvalues of equipment
    " Type conversion
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = iv_equnr
      IMPORTING
        output = iv_equnr.
    MOVE iv_equnr TO lv_object.
    CALL FUNCTION 'ALM_ME_TOB_CLASSES'
      EXPORTING
        object      = lv_object
        objecttable = c_class_equi
        language    = lv_language
      TABLES
        classvalues = lt_funcloc_classvalues
        return      = lt_return.

    IF lt_funcloc_classvalues IS INITIAL.
      CALL FUNCTION 'ZALM_ME_TOB_CLASSES'
        EXPORTING
          object      = lv_object
          objecttable = c_class_equi
          language    = lv_language
        TABLES
          classvalues = lt_funcloc_classvalues
          return      = lt_return.
    ENDIF.

    LOOP AT lt_classvalues ASSIGNING <fs_classvalue>.

      READ TABLE lt_funcloc_classvalues ASSIGNING <fs_funcloc_classvalue> WITH KEY charact = <fs_classvalue>-charact.

      READ TABLE lt_ksml ASSIGNING FIELD-SYMBOL(<fs_ksml>) WITH KEY imerk = <fs_classvalue>-internalchar.
      IF sy-subrc = 0.
        IF <fs_funcloc_classvalue> IS ASSIGNED.
          MOVE-CORRESPONDING <fs_funcloc_classvalue> TO <fs_classvalue>.
        ENDIF.
        <fs_classvalue>-datalength = <fs_classvalue>-datalength + lv_anzst + 6. "6 = max length of (EINHE)
        <fs_classvalue>-posnr = <fs_ksml>-posnr.
        SHIFT <fs_classvalue>-charact_descr LEFT DELETING LEADING space.
        SHIFT <fs_classvalue>-value_char LEFT DELETING LEADING space.
        APPEND <fs_classvalue> TO et_classvalues.
      ENDIF.
      UNASSIGN <fs_funcloc_classvalue>.
    ENDLOOP.

  ELSE.

    LOOP AT lt_classvalues ASSIGNING <fs_classvalue>.
      READ TABLE lt_ksml ASSIGNING <fs_ksml> WITH KEY imerk = <fs_classvalue>-internalchar.
      IF sy-subrc = 0.
        <fs_classvalue>-datalength = <fs_classvalue>-datalength + lv_anzst + 6. "6 = max length of (EINHE)
        <fs_classvalue>-posnr = <fs_ksml>-posnr.
        SHIFT <fs_classvalue>-charact_descr LEFT DELETING LEADING space.
        APPEND <fs_classvalue> TO et_classvalues.
      ENDIF.
    ENDLOOP.

  ENDIF.

  " sort classvalues alphabetically
*  SORT et_classvalues BY charact_descr ASCENDING.
  SORT et_classvalues BY posnr ASCENDING.

  ev_equnr = iv_equnr.
  ev_class = iv_class.
  ev_classtype = iv_classtype.
  ev_language = iv_language.

  IF iv_charact IS NOT INITIAL.
    DELETE et_classvalues WHERE charact NE iv_charact.
  ENDIF.

  IF iv_value_char IS NOT INITIAL.
    DELETE et_classvalues WHERE value_char NE iv_value_char.
  ENDIF.

ENDFUNCTION.
