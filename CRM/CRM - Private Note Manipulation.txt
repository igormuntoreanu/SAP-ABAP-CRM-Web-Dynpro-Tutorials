METHOD inherit_private_note.
************************************************************************
* Author           : Igor Muntoreanu / IMUNTORE
* Date             : 07.08.2019
* Change Reference : ZMKM Sprint 8 / 2019
*-----------------------------------------------------------------------
* Description: Kopieren der Notizfunktionen
*-----------------------------------------------------------------------
* Change History
* No.  Date          Author               Change Reference
*-----------------------------------------------------------------------
* 001  20190807      IMUNTORE             Aufgabe 8001242 ZMKMTCR-1835
************************************************************************

  DATA: lt_guid TYPE crmt_object_guid_tab,
        ls_guid TYPE LINE OF crmt_object_guid_tab.

  DATA: lr_comp TYPE REF TO cl_gsprivno_bspwdcomponen_impl.

  DATA(lr_note) = me->typed_context->privnote->collection_wrapper->get_current( ).
  " Check if its necessary to get the Private Note through reference
  CHECK lr_note IS NOT BOUND.

  TRY.
      lr_comp ?= me->comp_controller.
      DATA(lv_bor_obj)  = lr_comp->typed_context->borobject->collection_wrapper->get_current( )->get_property_as_string( 'OBJKEY' ).
      DATA(lv_bor_type) = lr_comp->typed_context->borobject->collection_wrapper->get_current( )->get_property_as_string( 'OBJTYPE' ).

      ls_guid = lv_bor_obj.
      INSERT ls_guid INTO TABLE  lt_guid.

      get_order( EXPORTING it_guid = lt_guid
                 IMPORTING et_head = DATA(lt_head)
                           et_flow = DATA(lt_flow) ).

      " Check if the document is open through the follow up creation
      READ TABLE lt_head INTO DATA(ls_head) INDEX 1.
      IF sy-subrc = 0 AND ls_head-predecessor_guid IS NOT INITIAL.

        set_private_note( EXPORTING ev_guid    = CONV #( ls_head-predecessor_guid )
                                    ev_objtype = ls_head-predecessor_object_type ).

      ELSE. "Its not a follow up, then get the flow and read from db.

        CASE ls_head-object_type.
          WHEN zcl_param_util=>gv_object_type_lead. "Lead
            "Nothing is necessary since it is the first level document
          WHEN zcl_param_util=>gv_object_type_opportunity. "Opportunity
            READ TABLE lt_flow INTO DATA(ls_flow) WITH KEY objkey_b  = ls_head-guid
                                                           objtype_a = zcl_param_util=>gv_object_type_lead.
            IF sy-subrc = 0.

              set_private_note( EXPORTING ev_guid    = CONV #( ls_flow-objkey_a )
                                          ev_objtype = ls_flow-objtype_a ).

            ENDIF.
          WHEN zcl_param_util=>gv_object_type_quotation. "Angebot
            "Try first to read the opportunity
            READ TABLE lt_flow INTO ls_flow WITH KEY objkey_b  = ls_head-guid
                                                     objtype_a = zcl_param_util=>gv_object_type_opportunity.
            IF sy-subrc = 0.

              set_private_note( EXPORTING ev_guid    = CONV #( ls_flow-objkey_a )
                                          ev_objtype = ls_flow-objtype_a ).

            ELSE.
              "If not found, check if the Lead is the father
              READ TABLE lt_flow INTO ls_flow WITH KEY objkey_b  = ls_head-guid
                                                       objtype_a = zcl_param_util=>gv_object_type_lead.
              IF sy-subrc = 0.

                set_private_note( EXPORTING ev_guid    = CONV #( ls_flow-objkey_a )
                                            ev_objtype = ls_flow-objtype_a ).

              ELSE.
                "If not, can be also that the angebot was generated by another angebot
                READ TABLE lt_flow INTO ls_flow WITH KEY objkey_b  = ls_head-guid
                                                         objtype_a = zcl_param_util=>gv_object_type_quotation.
                IF sy-subrc = 0.

                  set_private_note( EXPORTING ev_guid    = CONV #( ls_flow-objkey_a )
                                              ev_objtype = ls_flow-objtype_a ).

                ENDIF.
              ENDIF.
            ENDIF.
          WHEN OTHERS.
        ENDCASE.
      ENDIF.

    CATCH cx_root.
      RETURN.
  ENDTRY.

ENDMETHOD.





________________________________________



METHOD get_order.

  "Could not user OW function due to only display mode and not creating a fup document
  CALL FUNCTION 'CRM_ORDER_READ'
    EXPORTING
      it_header_guid       = it_guid
    IMPORTING
      et_orderadm_h        = et_head
      et_doc_flow          = et_flow
    EXCEPTIONS
      document_not_found   = 1
      error_occurred       = 2
      document_locked      = 3
      no_change_authority  = 4
      no_display_authority = 5
      no_change_allowed    = 6
      OTHERS               = 7.

ENDMETHOD.


_________________________________________

METHOD set_private_note.

  DATA: lt_guid             TYPE crmt_object_guid_tab,
        ls_guid             TYPE LINE OF crmt_object_guid_tab,
        lt_query_param      TYPE crmt_name_value_pair_tab,
        ls_query_param_line TYPE crmt_name_value_pair,
        lr_col              TYPE REF TO if_bol_entity_col.

  ls_query_param_line-name = 'OBJTYPE'.

  IF ev_objtype IS INITIAL.

    SELECT SINGLE object_type
           FROM crmd_orderadm_h
           INTO ls_query_param_line-value
           WHERE guid = ev_guid.
  ELSE.

    ls_query_param_line-value = ev_objtype.

  ENDIF.

  IF ls_query_param_line-value IS NOT INITIAL.
    APPEND ls_query_param_line TO lt_query_param.

    ls_query_param_line-name = 'OBJKEY'.
    ls_query_param_line-value = ev_guid.
    CHECK ls_query_param_line-value IS NOT INITIAL.
    APPEND ls_query_param_line TO lt_query_param.

    DATA(lr_core) = cl_crm_bol_core=>get_instance( ).

    lr_col = lr_core->query( iv_query_name   = 'QueryPrivNote'
                             it_query_params = lt_query_param
                             iv_view_name    = '' ).

    DATA(lr_curr) = lr_col->get_current( ).
    IF lr_curr IS NOT BOUND. " Scenario-> Opportunity to Angebot
      " Then get from the Lead because it is initial

      ls_guid = ev_guid.
      INSERT ls_guid INTO TABLE lt_guid.

      get_order( EXPORTING it_guid = lt_guid
                 IMPORTING et_head = DATA(lt_head)
                           et_flow = DATA(lt_flow) ).

      READ TABLE lt_flow INTO DATA(ls_flow) WITH KEY objkey_b  = ev_guid
                                                     objtype_a = ZCL_PARAM_UTIL=>GV_OBJECT_TYPE_LEAD.
      IF sy-subrc = 0.

        set_private_note( EXPORTING ev_guid    = CONV #( ls_flow-objkey_a )
                                    ev_objtype = ls_flow-objtype_a ).

        RETURN.

      ENDIF.

    ENDIF.

    me->typed_context->privnote->collection_wrapper->set_collection( lr_col ).

  ENDIF.

ENDMETHOD.



______________________________________


private section.

  methods GET_ORDER
    importing
      !IT_GUID type CRMT_OBJECT_GUID_TAB
    exporting
      !ET_HEAD type CRMT_ORDERADM_H_WRKT
      !ET_FLOW type CRMT_DOC_FLOW_WRKT .
  methods INHERIT_PRIVATE_NOTE .
  methods SET_PRIVATE_NOTE
    importing
      !EV_GUID type STRING
      !EV_OBJTYPE type SWO_OBJTYP .